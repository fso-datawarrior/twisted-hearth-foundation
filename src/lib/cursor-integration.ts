// Cursor Integration for Stagewise Toolbar
// Handles communication between the Stagewise toolbar and Cursor's chat system

export interface ComponentInfo {
  tagName: string;
  className: string;
  id: string;
  textContent: string;
  attributes: Record<string, string>;
  boundingRect: DOMRect;
  componentName?: string;
  props?: Record<string, any>;
}

export interface CursorMessage {
  type: string;
  data: string;
  source?: string;
}

export function setupCursorIntegration() {
  // Listen for messages from the Stagewise toolbar
  window.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'stagewise-component-info') {
      handleComponentInfoMessage(event.data);
    }
  });

  // Also listen for postMessage from iframe context
  window.addEventListener('message', (event) => {
    if (event.data && event.data.source === 'stagewise-toolbar') {
      handleComponentInfoMessage(event.data);
    }
  });
}

function handleComponentInfoMessage(message: CursorMessage) {
  console.log('ðŸŽƒ Received component info from Stagewise:', message.data);

  // Try to send to Cursor chat if available
  if ((window as any).cursor) {
    // Cursor webview context
    (window as any).cursor.postMessage({
      command: 'stagewise.componentInfo',
      data: message.data
    });
  } else if (window.parent && window.parent !== window) {
    // Iframe context - try to send to parent
    window.parent.postMessage({
      type: 'stagewise-component-info',
      data: message.data,
      source: 'stagewise-webview'
    }, '*');
  } else {
    // Fallback: show in console and copy to clipboard
    console.log('ðŸŽƒ Component info for Cursor chat:', message.data);

    // Copy to clipboard as fallback
    navigator.clipboard.writeText(message.data).then(() => {
      console.log('ðŸŽƒ Component info copied to clipboard for Cursor chat');
    }).catch(err => {
      console.error('Failed to copy component info to clipboard:', err);
    });
  }
}

export function sendToCursorChat(componentInfo: ComponentInfo) {
  const formattedMessage = formatComponentForCursorChat(componentInfo);

  let sent = false;

  // Method 1: Try Cursor's webview API
  if ((window as any).cursor) {
    try {
      (window as any).cursor.postMessage({
        command: 'stagewise.componentInfo',
        data: formattedMessage
      });
      sent = true;
      console.log('ðŸŽƒ Component info sent via Cursor webview API');
    } catch (error) {
      console.log('Cursor webview API not available:', error);
    }
  }

  // Method 2: Try Cursor's global API
  if (!sent && (window as any).cursorChat) {
    try {
      (window as any).cursorChat.sendMessage(formattedMessage);
      sent = true;
      console.log('ðŸŽƒ Component info sent via Cursor global API');
    } catch (error) {
      console.log('Cursor global API not available:', error);
    }
  }

  // Method 3: Try postMessage to parent (if in iframe)
  if (!sent && window.parent && window.parent !== window) {
    try {
      window.parent.postMessage({
        type: 'stagewise-component-info',
        data: formattedMessage,
        source: 'stagewise-webview'
      }, '*');
      sent = true;
      console.log('ðŸŽƒ Component info sent via postMessage to parent');
    } catch (error) {
      console.log('PostMessage to parent failed:', error);
    }
  }

  // Method 4: Try Cursor's extension API
  if (!sent && (window as any).cursorExtension) {
    try {
      (window as any).cursorExtension.sendToChat(formattedMessage);
      sent = true;
      console.log('ðŸŽƒ Component info sent via Cursor extension API');
    } catch (error) {
      console.log('Cursor extension API not available:', error);
    }
  }

  // Method 5: Fallback - copy to clipboard and show instructions
  if (!sent) {
    navigator.clipboard.writeText(formattedMessage).then(() => {
      console.log('ðŸŽƒ Component info copied to clipboard - paste in Cursor chat');
      showCursorInstructions();
    }).catch(err => {
      console.error('Failed to copy to clipboard:', err);
    });
  }
}

function formatComponentForCursorChat(info: ComponentInfo): string {
  return `ðŸŽƒ Stagewise Component Info

**Component Details:**
- **Tag:** \`${info.tagName}\`
- **Class:** \`${info.className || 'None'}\`
- **ID:** \`${info.id || 'None'}\`
- **Component Name:** \`${info.componentName}\`

**Content:**
\`\`\`
${info.textContent.substring(0, 200)}${info.textContent.length > 200 ? '...' : ''}
\`\`\`

**Attributes:**
\`\`\`json
${JSON.stringify(info.attributes, null, 2)}
\`\`\`

**Position & Size:**
- Position: (${Math.round(info.boundingRect.left)}, ${Math.round(info.boundingRect.top)})
- Size: ${Math.round(info.boundingRect.width)} Ã— ${Math.round(info.boundingRect.height)}

**Generated by Stagewise Toolbar** - Component inspection and development tool
`;
}

function showCursorInstructions() {
  const modal = document.createElement('div');
  modal.setAttribute('data-stagewise-component-info', 'true');
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 10001;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
  `;

  modal.innerHTML = `
    <div style="
      background: white;
      border-radius: 8px;
      padding: 24px;
      max-width: 500px;
      text-align: center;
    ">
      <h3 style="margin: 0 0 16px 0; color: #1F2937; font-size: 18px; font-weight: 600;">
        ðŸŽƒ Component Info Copied!
      </h3>
      <p style="margin: 0 0 16px 0; color: #6B7280; font-size: 14px; line-height: 1.5;">
        The component information has been copied to your clipboard. 
        <strong>Paste it in Cursor's chat</strong> to get AI assistance with this component.
      </p>
      <p style="margin: 0 0 20px 0; color: #9CA3AF; font-size: 12px;">
        Tip: Use Ctrl+V (or Cmd+V on Mac) to paste in Cursor's chat input.
      </p>
      <button id="close-cursor-modal" style="
        background: #3B82F6; 
        color: white; 
        border: none; 
        padding: 8px 16px; 
        border-radius: 4px; 
        cursor: pointer;
        font-size: 14px;
      ">Got it!</button>
    </div>
  `;

  document.body.appendChild(modal);

  const closeBtn = modal.querySelector('#close-cursor-modal');
  closeBtn?.addEventListener('click', () => {
    document.body.removeChild(modal);
  });

  // Auto-close after 5 seconds
  setTimeout(() => {
    if (document.body.contains(modal)) {
      document.body.removeChild(modal);
    }
  }, 5000);
}

// Initialize integration when the module loads
if (typeof window !== 'undefined') {
  setupCursorIntegration();
}
