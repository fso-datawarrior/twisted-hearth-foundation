diff --git a/supabase/migrations/20251012110000_normalize_past_vignettes_rls.sql b/supabase/migrations/20251012110000_normalize_past_vignettes_rls.sql
new file mode 100644
--- /dev/null
+++ b/supabase/migrations/20251012110000_normalize_past_vignettes_rls.sql
@@ -0,0 +1,36 @@
+-- Normalize RLS audience for past_vignettes select policy
+-- Assumption: We want only authenticated users to read active vignettes
+-- If anonymous access is desired, change TO authenticated -> TO anon
+
+-- Drop existing ambiguous policy variants if present
+DO $$
+BEGIN
+  IF EXISTS (
+    SELECT 1 FROM pg_policies 
+    WHERE schemaname = 'public' AND tablename = 'past_vignettes' AND policyname = 'Anyone can view active vignettes'
+  ) THEN
+    EXECUTE 'DROP POLICY "Anyone can view active vignettes" ON public.past_vignettes';
+  END IF;
+END $$;
+
+-- Recreate explicitly scoping audience
+CREATE POLICY "Anyone can view active vignettes"
+  ON public.past_vignettes
+  FOR SELECT
+  TO authenticated
+  USING (is_active = true OR public.has_role(auth.uid(), 'admin'::app_role));
+
+-- Ensure admin manage policy remains correct
+DO $$
+BEGIN
+  IF NOT EXISTS (
+    SELECT 1 FROM pg_policies 
+    WHERE schemaname = 'public' AND tablename = 'past_vignettes' AND policyname = 'Admins can manage vignettes'
+  ) THEN
+    EXECUTE $$CREATE POLICY "Admins can manage vignettes"
+      ON public.past_vignettes FOR ALL
+      TO authenticated
+      USING (public.has_role(auth.uid(), 'admin'::app_role))
+      WITH CHECK (public.has_role(auth.uid(), 'admin'::app_role))$$;
+  END IF;
+END $$;
