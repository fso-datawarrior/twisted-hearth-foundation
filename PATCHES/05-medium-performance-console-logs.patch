--- a/src/lib/auth.tsx
+++ b/src/lib/auth.tsx
@@ -1,4 +1,5 @@
 import { createContext, useContext, useEffect, useState } from "react";
+import { logger } from "@/lib/logger";
 import { supabase } from "@/integrations/supabase/client";
 import type { User, Session } from '@supabase/supabase-js';
 import { isPartyOver } from './event';
@@ -30,7 +31,7 @@
   const [loading, setLoading] = useState(true);
 
   useEffect(() => {
-    console.log('🔐 AuthProvider: Initializing auth state...');
+    logger.debug('🔐 AuthProvider: Initializing auth state...');
     
     // Set up auth state listener FIRST to catch magic link auth
     const { data: { subscription } } = supabase.auth.onAuthStateChange(
       (event, session) => {
-        console.log('🔐 AuthProvider: Auth state changed', { event, hasSession: !!session });
+        logger.debug('🔐 AuthProvider: Auth state changed', { event, hasSession: !!session });
         setSession(session);
         setUser(session?.user ? { 
           id: session.user.id, 
@@ -44,7 +45,7 @@
     supabase.auth.getSession()
       .then(({ data: { session }, error }) => {
         if (error) {
-          console.error('🔐 AuthProvider: Error getting session', error);
+          logger.error('🔐 AuthProvider: Error getting session', error);
         } else {
-          console.log('🔐 AuthProvider: Got existing session', { hasSession: !!session });
+          logger.debug('🔐 AuthProvider: Got existing session', { hasSession: !!session });
         }
         setSession(session);
         setUser(session?.user ? { 
           id: session.user.id, 
@@ -55,7 +56,7 @@
         setLoading(false);
       })
       .catch((error) => {
-        console.error('🔐 AuthProvider: Failed to get session', error);
+        logger.error('🔐 AuthProvider: Failed to get session', error);
         setLoading(false);
       });
