--- a/supabase/functions/send-rsvp-confirmation/index.ts
+++ b/supabase/functions/send-rsvp-confirmation/index.ts
@@ -1,5 +1,26 @@
 import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
 import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
+import { z } from 'https://deno.land/x/zod@v3.22.4/mod.ts';
+
+// Input validation schema
+const RSVPConfirmationSchema = z.object({
+  name: z.string()
+    .trim()
+    .min(1, 'Name is required')
+    .max(100, 'Name must be less than 100 characters'),
+  email: z.string()
+    .trim()
+    .email('Invalid email address')
+    .max(255, 'Email must be less than 255 characters'),
+  num_guests: z.number()
+    .int('Number of guests must be an integer')
+    .min(1, 'Must have at least 1 guest')
+    .max(10, 'Maximum 10 guests allowed'),
+  dietary_restrictions: z.string()
+    .max(500, 'Dietary restrictions must be less than 500 characters')
+    .optional()
+    .nullable()
+});
 
 const corsHeaders = {
   'Access-Control-Allow-Origin': '*',
@@ -93,10 +114,24 @@
   }
   
   try {
-    const { name, email, num_guests, dietary_restrictions } = await req.json();
+    const rawBody = await req.json();
+    
+    // Validate input
+    const validationResult = RSVPConfirmationSchema.safeParse(rawBody);
+    
+    if (!validationResult.success) {
+      console.error('Validation error:', validationResult.error);
+      return new Response(
+        JSON.stringify({ 
+          error: 'Invalid input',
+          details: validationResult.error.errors 
+        }),
+        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
+      );
+    }
+    
+    const { name, email, num_guests, dietary_restrictions } = validationResult.data;
     
-    console.log('Sending RSVP confirmation email to:', email);
-    console.log('Name:', name, 'Guests:', num_guests);
     console.log('Using Mailjet API Key:', MAILJET_API_KEY ? 'Set' : 'Not set');
     console.log('Using Mailjet API Secret:', MAILJET_API_SECRET ? 'Set' : 'Not set');
 
--- a/supabase/functions/send-bulk-email/index.ts
+++ b/supabase/functions/send-bulk-email/index.ts
@@ -1,5 +1,26 @@
 import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
 import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
+import { z } from 'https://deno.land/x/zod@v3.22.4/mod.ts';
+
+// Input validation schema
+const BulkEmailSchema = z.object({
+  recipients: z.array(
+    z.string()
+      .trim()
+      .email('Invalid email address')
+  )
+    .min(1, 'At least one recipient required')
+    .max(100, 'Maximum 100 recipients per batch'),
+  subject: z.string()
+    .trim()
+    .min(1, 'Subject is required')
+    .max(200, 'Subject must be less than 200 characters'),
+  html_content: z.string()
+    .trim()
+    .min(1, 'Email content is required')
+    .max(50000, 'Email content must be less than 50KB'),
+  from_name: z.string().trim().max(100).optional()
+});
 
 const corsHeaders = {
   'Access-Control-Allow-Origin': '*',
@@ -20,12 +41,26 @@
   }
   
   try {
-    const { recipients, subject, html_content, from_name } = await req.json();
+    const rawBody = await req.json();
     
-    console.log('Sending bulk email to recipients:', recipients);
-    console.log('Subject:', subject);
+    // Validate input
+    const validationResult = BulkEmailSchema.safeParse(rawBody);
+    
+    if (!validationResult.success) {
+      console.error('Validation error:', validationResult.error);
+      return new Response(
+        JSON.stringify({ 
+          error: 'Invalid input',
+          details: validationResult.error.errors 
+        }),
+        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
+      );
+    }
+    
+    const { recipients, subject, html_content, from_name } = validationResult.data;
     console.log('Using Mailjet API Key:', MAILJET_API_KEY ? 'Set' : 'Not set');
     console.log('Using Mailjet API Secret:', MAILJET_API_SECRET ? 'Set' : 'Not set');
+    console.log('Sending bulk email to', recipients.length, 'recipients');
     
     if (!MAILJET_API_KEY || !MAILJET_API_SECRET) {
       throw new Error('Mailjet credentials not configured');

--- a/supabase/functions/send-contribution-confirmation/index.ts
+++ b/supabase/functions/send-contribution-confirmation/index.ts
@@ -1,5 +1,26 @@
 import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
 import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
+import { z } from 'https://deno.land/x/zod@v3.22.4/mod.ts';
+
+// Input validation schema
+const ContributionSchema = z.object({
+  name: z.string()
+    .trim()
+    .min(1, 'Name is required')
+    .max(100, 'Name must be less than 100 characters'),
+  email: z.string()
+    .trim()
+    .email('Invalid email address')
+    .max(255, 'Email must be less than 255 characters'),
+  item_name: z.string()
+    .trim()
+    .min(1, 'Item name is required')
+    .max(200, 'Item name must be less than 200 characters'),
+  notes: z.string()
+    .max(500, 'Notes must be less than 500 characters')
+    .optional()
+    .nullable()
+});
 
 const corsHeaders = {
   'Access-Control-Allow-Origin': '*',
@@ -20,9 +41,24 @@
   }
   
   try {
-    const { name, email, item_name, notes } = await req.json();
+    const rawBody = await req.json();
     
-    console.log('Sending contribution confirmation email to:', email);
+    // Validate input
+    const validationResult = ContributionSchema.safeParse(rawBody);
+    
+    if (!validationResult.success) {
+      console.error('Validation error:', validationResult.error);
+      return new Response(
+        JSON.stringify({ 
+          error: 'Invalid input',
+          details: validationResult.error.errors 
+        }),
+        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
+      );
+    }
+    
+    const { name, email, item_name, notes } = validationResult.data;
+    
     console.log('Using Mailjet API Key:', MAILJET_API_KEY ? 'Set' : 'Not set');
     
     if (!MAILJET_API_KEY || !MAILJET_API_SECRET) {
